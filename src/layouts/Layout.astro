---
import "@fontsource/poppins";
import "@fontsource/meow-script";
import Posthog from "@/components/posthog.astro";

interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="author" content="Aman Chand" />
    <meta
      name="description"
      content="I am Aman, a software developer. I make software that people can use."
    />
    <meta
      name="keywords"
      content="software developer, portfolio, programming, web development, app development"
    />
    <link rel="canonical" href="https://amanchand.com.np" />
    <meta name="robots" content="index, follow" />
    <meta name="viewport" content="width=device-width" />
    <meta property="og:title" content={title} />
    <meta
      property="og:description"
      content="I am Aman, a software developer. I make software that people can use."
    />
    <meta property="og:image" content="/pwa-512x512.png" />
    <meta property="og:url" content="https://amanchand.com.np" />
    <meta property="og:type" content="website" />
    <meta name="generator" content={Astro.generator} />
    <link rel="icon" type="image/svg+xml" href="/logo.svg" />
    <title>{title}</title>
    <Posthog />
    <script
      is:inline
      defer
      src="https://cdn.jsdelivr.net/npm/@tsparticles/confetti@3.0.3/tsparticles.confetti.bundle.min.js"
    ></script>
    <script
      is:inline
      type="application/ld+json"
      set:html={JSON.stringify({
        "@context": "https://schema.org",
        "@type": "Person",
        name: "Aman Chand",
        jobTitle: "Software Developer",
        url: "https://amanchand.com.np",
        sameAs: ["https://github.com/Aman-in-Github"],
      })}
    />
  </head>
  <body
    class="min-h-screen bg-background text-body font-body flex justify-center mt-12 lg:mt-36 px-12 selection:bg-neutral-800"
  >
    <slot />
  </body>
</html>

<script>
  let intensity = 0;
  let isWindowFocused = true;
  let hasReachedMaxIntensity = false;

  const today = new Date();

  const isTodayBirthday =
    isWindowFocused && today.getMonth() === 10 && today.getDate() === 5;

  if (isTodayBirthday) {
    const defaults = {
      spread: 400,
      ticks: 100,
      gravity: 0,
      decay: 0.94,
      startVelocity: 30,
    };

    function shoot() {
      // @ts-ignore
      confetti({
        ...defaults,
        particleCount: 100,
        scalar: 1.75,
        shapes: ["circle", "square"],
        colors: ["#a864fd", "#29cdff", "#78ff44", "#ff718d", "#fdff6a"],
      });
      // @ts-ignore
      confetti({
        ...defaults,
        particleCount: 100,
        scalar: 1.75,
        shapes: ["emoji"],
        shapeOptions: {
          emoji: {
            value: ["🎁", "🎂", "🍫"],
          },
        },
      });
    }

    setTimeout(shoot, 0);
    setTimeout(shoot, 100);
    setTimeout(shoot, 200);
  }

  const isTodayValentine =
    isWindowFocused && today.getMonth() === 1 && today.getDate() === 14;

  if (isTodayValentine) {
    const defaults = {
      spread: 360,
      ticks: 100,
      gravity: 0,
      decay: 0.94,
      startVelocity: 30,
      shapes: ["heart"],
      colors: ["#ffc0cb", "#ff69b4", "#ff1493", "#c71585"],
    };

    // @ts-ignore
    confetti({
      ...defaults,
      particleCount: 100,
      scalar: 2,
    });

    // @ts-ignore
    confetti({
      ...defaults,
      particleCount: 75,
      scalar: 3,
    });

    // @ts-ignore
    confetti({
      ...defaults,
      particleCount: 50,
      scalar: 4,
    });
  }

  function startConfettiSequence() {
    window.addEventListener("focus", () => {
      isWindowFocused = true;
    });

    window.addEventListener("blur", () => {
      isWindowFocused = false;
    });

    function runConfettiWithIntensity() {
      if (!isWindowFocused || hasReachedMaxIntensity) return;

      switch (intensity) {
        case 1:
          const starDefaults = {
            spread: 360,
            ticks: 50,
            gravity: 0,
            decay: 0.94,
            startVelocity: 30,
            shapes: ["star"],
            colors: ["#ffe400", "#ffbd00", "#e89400", "#ffca6c", "#fdffb8"],
          };

          function shootStars() {
            // @ts-ignore
            confetti({
              ...starDefaults,
              particleCount: 40,
              scalar: 1.2,
              shapes: ["star"],
            });
            // @ts-ignore
            confetti({
              ...starDefaults,
              particleCount: 10,
              scalar: 0.75,
              shapes: ["circle"],
            });
          }

          shootStars();
          setTimeout(shootStars, 100);
          setTimeout(shootStars, 200);
          break;

        case 2:
          const multiColorDefaults = {
            spread: 360,
            ticks: 100,
            gravity: 0,
            decay: 0.94,
            startVelocity: 30,
          };

          function shootMultiColor() {
            // @ts-ignore
            confetti({
              ...multiColorDefaults,
              particleCount: 40,
              scalar: 1.5,
              shapes: ["circle", "square"],
              colors: ["#a864fd", "#29cdff", "#78ff44", "#ff718d", "#fdff6a"],
            });
            // @ts-ignore
            confetti({
              ...multiColorDefaults,
              particleCount: 40,
              scalar: 2,
              shapes: ["emoji"],
              shapeOptions: {
                emoji: {
                  value: ["🦄", "🌈"],
                },
              },
            });
          }

          shootMultiColor();
          setTimeout(shootMultiColor, 100);
          setTimeout(shootMultiColor, 200);
          break;

        case 3:
          const duration = 15 * 1000;
          const animationEnd = Date.now() + duration;
          const randomDefaults = {
            startVelocity: 30,
            spread: 360,
            ticks: 60,
            zIndex: 0,
          };

          function randomInRange(min: number, max: number) {
            return Math.random() * (max - min) + min;
          }

          const interval = setInterval(function () {
            const timeLeft = animationEnd - Date.now();
            if (timeLeft <= 0) {
              return clearInterval(interval);
            }

            const particleCount = 50 * (timeLeft / duration);
            // @ts-ignore
            confetti(
              Object.assign({}, randomDefaults, {
                particleCount,
                origin: { x: randomInRange(0.1, 0.3), y: Math.random() - 0.2 },
              }),
            );
            // @ts-ignore
            confetti(
              Object.assign({}, randomDefaults, {
                particleCount,
                origin: { x: randomInRange(0.7, 0.9), y: Math.random() - 0.2 },
              }),
            );
          }, 250);
          break;
      }
    }

    const intensityInterval = setInterval(() => {
      if (isWindowFocused) {
        if (intensity < 3) {
          intensity++;
          runConfettiWithIntensity();
        } else {
          hasReachedMaxIntensity = true;
          clearInterval(intensityInterval);
        }
      }
    }, 15000);

    setTimeout(runConfettiWithIntensity, 15000);
  }

  document.addEventListener("visibilitychange", () => {
    isWindowFocused = !document.hidden;
  });

  startConfettiSequence();
</script>
